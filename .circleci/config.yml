# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  # ===========================
  # Stage 1: Cache dependencies
  # ===========================
  cache:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-
      - run: gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .gradle

  # ==================
  # Stage 2: Unit Test
  # ==================
  unitTest:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci
      # Run unit tests, save results
      - run: gradle unitTests
      - run:
          command: |
            mkdir -p ~/unit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/unit/ \;
          when: always
      - store_test_results:
          path: ~/unit
      - store_artifacts:
          path: ~/unit


  # ===============================================
  # Step 3: Build Artifact, docker image and upload
  # ===============================================
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-
      # Build jar
      - run: gradle shadowJar
      - run:
          command: |
            mkdir -p ~/jars/
            find . -type f -regex ".*/build/libs/heimdall-.*jar" -exec cp {} ~/jars/ \;
      - store_artifacts:
          path: ~/jars
      # Build docker image
      - setup_remote_docker
      - run:
          name: Build docker image
          command: |
            docker build -t imulab/heimdall:latest .
      - run:
          name: Upload docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
              docker push imulab/heimdall:latest
              echo "pushed image to docker"
            fi

workflows:
  version: 2
  test_and_build:
    jobs:
      - cache
      - unitTest:
          requires:
            - cache
      - build:
          requires:
            - unitTest