# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2

app_version: &app_version 0.0.1.SNAPSHOT

restore_gradle_cache: &restore_gradle_cache
  restore_cache:
    keys:
      - gradle-dep-{{ checksum "build.gradle" }}
      - gradle-dep-

save_gradle_cache: &save_gradle_cache
  save_cache:
    paths:
      - /home/circleci/.gradle
    key: gradle-dep-{{ checksum "build.gradle" }}

copy_test_result: &copy_test_result
  run:
    command: |
      mkdir -p $TEST_RESULT
      find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} $TEST_RESULT \;
    when: always

jobs:
  # ====================
  # Stage 1.1: Unit Test
  # ====================
  unitTest:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      TEST_RESULT: ~/unit
    steps:
      - checkout
      - *restore_gradle_cache
      - run: gradle dependencies
      - run: gradle unitTests
      - *save_gradle_cache
      - *copy_test_result
      - store_test_results:
          path: $TEST_RESULT
      - store_artifacts:
          path: $TEST_RESULT

  # ===========================
  # Stage 1.2: Integration Test
  # ===========================
  integrationTest:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      TEST_RESULT: ~/integration
    steps:
      - checkout
      - *restore_gradle_cache
      - run: gradle dependencies
      - run: gradle integrationTests
      - *save_gradle_cache
      - *copy_test_result
      - store_test_results:
          path: $TEST_RESULT
      - store_artifacts:
          path: $TEST_RESULT

  # ======================
  # Step 2: Build Artifact
  # ======================
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      APP_VERSION: *app_version
    steps:
      - checkout
      - *restore_gradle_cache
      - run: gradle dependencies
      - run: gradle shadowJar -PprojectVersion=$APP_VERSION
      - *save_gradle_cache
      - run:
          command: |
            mkdir -p ~/jars/
            find . -type f -regex ".*/build/libs/heimdall-$APP_VERSION.jar" -exec cp {} ~/jars/ \;
      - store_artifacts:
          path: ~/jars
      - persist_to_workspace:
          root: ~/jars/
          paths:
            - heimdall-$APP_VERSION.jar


  # ===================
  # Step 3: Build Image
  # ===================
  docker_image:
    docker:
      image: docker:18.05.0-ce
    working_directory: /app
    environment:
      APP_VERSION: *app_version
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy workspace jar
          command: |
            cp /tmp/workspace/heimdall-$$APP_VERSION.jar /app/heimdall.jar
      - setup_remote_docker
      - run:
          name: Build docker image
          command: |
            docker build -t imulab/heimdall:$APP_VERSION .
      - run:
          name: Upload docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
              docker push imulab/heimdall:$APP_VERSION
            fi

workflows:
  version: 2
  app_ci_pipeline:
    jobs:
      - unitTest
      - integrationTest
      - build:
          requires:
            - unitTest
            - integrationTest
      - docker_image:
          requires:
            - build